public class List {
    Node head;
    public List (){
        head = null;
    }
    public Node merge (Node a, Node b){
        Node result = null;
        if (a == null) return b;
        if (b == null) return a;

        if (a.val <= b.val) {
            result = a;
            result.next = merge(a.next,b);
        }
        else{
            result = b;
            result.next = merge(a,b.next);
        }
        return result;
    }
    public Node mergeSort (Node head){
        if (head == null || head.next == null) return  head;
        Node middle = getMiddle(head);
        Node middle_next = middle.next;
        middle.next = null;
        Node left = mergeSort(head);
        Node right = mergeSort(middle_next);
        Node sortedList = merge(left, right);
        return sortedList;
    }
    public Node getMiddle(Node head){
        if (head == null) return head;
        Node fast = head, slow = head;
        while (fast.next != null && fast.next.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }

    public void add_last (int value){
        Node newNode = new Node(value);
        if (head == null){
            head = newNode;
            }
        else {
        Node current = head;
        while (current.next != null){
            current = current.next;
        }
        current.next = newNode;

    }}
    public void printList (){
        if (head == null) System.out.println("list is empty");
        Node current = head;
        while (current!= null){
            System.out.print(current.val + ", ");
            current = current.next;
        }
    }
}
